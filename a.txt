import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf

treino = "E:\Downloads\simpsons\simpsons_dataset"
teste = "E:\Downloads\simpsons\kaggle_simpson_testset"

img_treino = [os.path.join(treino, f) for f in os.listdir(treino)]
img_teste = [os.path.join(teste, f) for f in os.listdir(teste)]

treino_df = pd.read_csv("E:/Downloads/simpsons/number_pic_char.csv")

print(len(treino_df.name.unique()))

treino_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    rotation_range=25,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2)

treino_generator = treino_datagen.flow_from_directory(treino,
                                                      target_size=(80, 80),
                                                      batch_size=150,
                                                      subset='training',
                                                      class_mode='categorical',
                                                      color_mode='rgb')

val_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255, validation_split=0.2)


val_generator = val_datagen.flow_from_directory(treino,
                                                target_size=(80, 80),
                                                batch_size=150,
                                                subset='validation',
                                                class_mode='categorical',
                                                color_mode='rgb')

teste_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

teste_generator = teste_datagen.flow_from_directory(teste,
                                                    target_size=(80, 80),
                                                    batch_size=32,
                                                    class_mode='categorical',
                                                    color_mode='rgb')

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(32, (3, 3), padding='same',
          input_shape=(80, 80, 3), activation="relu"))
model.add(tf.keras.layers.Conv2D(32, (3, 3), activation="relu"))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv2D(
    64, (3, 3), padding='same', activation="relu"))
model.add(tf.keras.layers.Conv2D(64, (3, 3), activation="relu"))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv2D(
    256, (3, 3), padding='same', activation="relu"))
model.add(tf.keras.layers.Conv2D(256, (3, 3), activation="relu"))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(1024, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(43, activation='softmax'))

model.summary()
model.compile(loss='categorical_crossentropy',
              optimizer="adam", metrics=['accuracy'])

callbacks = [
    tf.keras.callbacks.EarlyStopping(monitor='val_loss',
                                     min_delta=0.001,
                                     mode="max",
                                     patience=10,
                                     verbose=1,
                                     restore_best_weights=True),

    tf.keras.callbacks.ModelCheckpoint(
        filepath='./model.keras',
        save_weights_only=False,
        monitor='val_accuracy',
        mode='max',
        save_best_only=True)]


history = model.fit(
    treino_generator,
    epochs=30,
    callbacks=callbacks,
    validation_data=val_generator,
    batch_size=300)

acc = history.history["accuracy"]
val_acc = history.history["val_accuracy"]
loss = history.history["loss"]
val_loss = history.history["val_loss"]

epochs = range(1, len(acc) + 1)
plt.plot(epochs, acc, "bo", label="Tranning_acc", color="red")
plt.plot(epochs, val_acc, "b", label="validation_acc", color="blue")
plt.legend()
plt.show()

score = model.evaluate(val_generator,batch_size=32)
print("Accuracy: {:.2f}%".format(score[1] * 100)) 
print("Loss: ",score[0])


from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np


saved_model = tf.keras.models.load_model('./model.keras')
saved_model

img_path = "/kaggle/input/the-simpsons-characters-dataset/kaggle_simpson_testset/kaggle_simpson_testset/bart_simpson_28.jpg"
img = image.load_img(img_path, target_size=(64, 64, 3))
plt.imshow(img)
plt.show()